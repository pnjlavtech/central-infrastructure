#.github/actions/terragrunt-action/action.yml
name: "tf_lint__tg_plan__checkov_scan"
description: "Tflint, Terragrunt Plan, and Scan with Checkov"

inputs:
  aws_account_id:
    description: "aws account id"
    required: true
  # apply:
  #   description: "Whether the job should apply after plan"
    # default: "false"
  environment_name:
    description: "Environment/AWS Account being targeted."
    default: "dev"
    required: true
  gh_pat:
    description: "gh_pat"
    required: true
  tg_ver:
    description: "tg ver"
    default: "0.59.7"
    required: true
  tg_version:
    description: "tg version"
    default: 0.59.7
    required: true
  tf_version:
    description: "tf version"
    default: 1.9.2
    required: true
  tf_plugin_cache_dir:
    description: "tf_plugin_cache_dir"
    default: "${{ github.workspace }}/.terraform.d/plugin-cache"
    required: true
  working_dir:
    description: "working dir"
    default: "./dev/us-west-2"
    required: true
  
runs:
  using: "composite" 
  steps:
    - name: Checkout repo
      uses: actions/checkout@main
          
    # - name: GitHub OIDC Auth to assume AWS Role
    #   uses: aws-actions/configure-aws-credentials@master
    #   with:
    #     role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
    #     aws-region: us-west-2

    # - name: Create Terraform Plugin Cache Dir
    #   run: mkdir -p $TF_PLUGIN_CACHE_DIR 
    #   shell: bash
    #   env:
    #     TF_PLUGIN_CACHE_DIR: ${{ inputs.tf_plugin_cache_dir }}

    # - name: Terraform Plugin Cache
    #   uses: actions/cache@v4.0.1
    #   with:
    #     path: ${{ inputs.tf_plugin_cache_dir }}
    #     key: ${{ runner.os }}-terraform-plugin-cache-${{ hashFiles('**/.terraform.lock.hcl') }}

    # - name: Setup TFLint
    #   uses: terraform-linters/setup-tflint@v4
    #   with:
    #     tflint_version: v0.50.3

    # - name: Show version
    #   run: tflint --version
    #   shell: bash

    # - name: Init TFLint
    #   run: tflint --init
    #   shell: bash
    #   env:
    #     # https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/plugins.md#avoiding-rate-limiting
    #     GITHUB_TOKEN: ${{ env.gh_pat }}

    # - name: Run TFLint
    #   run: tflint -f json 
    #   shell: bash


    # Install the latest version of Terragrunt CLI and 
    - name: Setup Terraform 
      uses: hashicorp/setup-Terraform@v3
      with:
        # terraform_version: ${{ env.tf_version }}
        terraform_wrapper: true

    - name: Setup Terraform version
      run: terraform --version
      shell: bash

    - name: Setup Terraform wrapper path
      run: which terraform
      shell: bash

    - name: Terragrunt Destroy ${{ inputs.environment_name }}
      uses: gruntwork-io/terragrunt-action@v2
      with:
        tf_version: ${{ inputs.tf_version }}
        tg_version: ${{ inputs.tg_version }}
        tg_dir: ${{ inputs.working_dir }}
        tg_command: 'run-all destroy'



    # - name: Terragrunt Plan ${{ inputs.environment_name }}
    #   uses: gruntwork-io/terragrunt-action@v2
    #   with:
    #     tf_version: ${{ inputs.tf_version }}
    #     tg_version: ${{ inputs.tg_version }}
    #     tg_dir: ${{ inputs.working_dir }}
    #     # tg_command: 'run-all plan --terragrunt-log-level debug'
    #     tg_command: 'run-all plan'



    # - name: Checkov GitHub Action
    #   uses: bridgecrewio/checkov-action@v12
    #   with:
    #     # This will add both a CLI output to the console and create a results.sarif file
    #     output_format: cli,sarif
    #     output_file_path: console,results.sarif
      
    # - name: Upload SARIF file
    #   uses: github/codeql-action/upload-sarif@v3     
    #   # Results are generated only on a success or failure
    #   # this is required since GitHub by default won't run the next step
    #   # when the previous one has failed. Security checks that do not pass will 'fail'.
    #   # An alternative is to add `continue-on-error: true` to the previous step
    #   # Or 'soft_fail: true' to checkov.
    #   if: success() || failure()
    #   with:
    #     sarif_file: results.sarif

    # - name: Terragrunt Apply ${{ inputs.environment_name }}
    #   # if: ${{ inputs.apply == true }}
    #   uses: gruntwork-io/terragrunt-action@v2
    #   with:
    #     tf_version: ${{ inputs.tf_version }}
    #     tg_version: ${{ inputs.tg_version }}
    #     tg_dir: ${{ inputs.working_dir }}
    #     tg_command: 'run-all apply'










    # - name: Setup Terragrunt
    #   uses: autero1/action-terragrunt@v3
    #   with:
    #     terragrunt-version: "0.59.7"
    #     token: ${{ env.gh_pat }}

    # - name: Terragrunt Init
    #   run: |
    #     ls -lart
    #     cd dev
    #     ls -lart
    #     cd us-west-2
    #     ls -lart
    #   shell: bash

    # - name: Setup Terragrunt ${( inputs.tg_ver }}
    #   run: |
    #     sudo wget -q -O /bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v$TG_VER/terragrunt_linux_amd64"
    #     sudo chmod +x /bin/terragrunt
    #     terragrunt -v
    #   shell: bash
    #   env:
    #     TG_VER: ${{ inputs.tg_ver }}



    # Initialize a new or existing Terragrunt working directory by creating initial files, loading any remote state, downloading modules, etc.
    # - name: Terragrunt Init
    #   run: |
    #     terragrunt init --terragrunt-non-interactive --terragrunt-log-level debug
    #   shell: bash
    #   env:
    #     AWS_ACCOUNT_ID: ${{ inputs.aws_account_id }}


    # - name: Setup Terragrunt
    #   uses: autero1/action-terragrunt@v3
    #   env:
    #     TG_VER: ${{ env.tg_ver }}
    #   with:
    #     token: ${{ env.gh_pat }}
      
    # - name: Terragrunt Plan ${{ inputs.environment_name }}
    #   run: |
    #     cd ${{ inputs.working_dir }}
    #     terragrunt run-all plan --terragrunt-log-level debug
    #   shell: bash
    #   env:
    #     WORKING_DIR: ${{ inputs.working_dir }}


    # - name: Terragrunt Plan ${{ inputs.environment_name }}
    #   uses: gruntwork-io/terragrunt-action@v2
    #   env:
    #     AWS_ACCOUNT_ID: ${{ inputs.aws_account_id }} 
    #     TF_PLUGIN_CACHE_DIR: ${{ inputs.tf_plugin_cache_dir }}
    #   with:
    #     tf_version: ${{ env.tf_version }}
    #     tg_version: ${{ env.tg_version }}
    #     tg_dir: ${{ env.working_dir }}
    #     tg_command: 'run-all plan --terragrunt-log-level debug'

    # - name: Terragrunt Apply ${{ inputs.environment_name }}
    #   if: ${{ inputs.apply == true }}
    #   run: |
    #     cd ${{ inputs.inputs.working_dir }}
    #     terragrunt run-all apply
    #   shell: bash
    #   env:
    #     WORKING_DIR: ${{ inputs.working_dir }}







