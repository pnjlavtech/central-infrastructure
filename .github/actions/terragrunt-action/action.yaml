#.github/actions/terragrunt-action/action.yml
name: "Tflint, Terragrunt Plan and Apply, Scan with Checkov"
description: "Whether the job should apply after plan"

inputs:
  aws_account_id:
    description: "aws account id"
    required: true
  apply:
    description: "Whether the job should apply after plan"
    default: "false"
  environment_name:
    description: "Environment/AWS Account being targeted."
    default: "dev"
    required: true
  gh_pat:
    description: "gh_pat"
    required: true
  tg_ver:
    description: "tg ver"
    default: "0.59.7"
    required: true
  tg_version:
    description: "tg version"
    default: 0.59.7
    required: true
  tf_version:
    description: "tf version"
    default: "1.8.3"
    required: true
  tf_plugin_cache_dir:
    description: "tf_plugin_cache_dir"
    default: "${{ github.workspace }}/.terraform.d/plugin-cache"
    required: true
  working_dir:
    description: "working dir"
    default: "./dev/us-west-2"
    required: true
  
runs:
  using: "composite" 
  steps:
    - name: Checkout repo
      uses: actions/checkout@main
          
    # - name: GitHub OIDC Auth to assume AWS Role
    #   uses: aws-actions/configure-aws-credentials@master
    #   with:
    #     role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
    #     aws-region: us-west-2

    - name: Create Terraform Plugin Cache Dir
      run: mkdir -p $TF_PLUGIN_CACHE_DIR 
      shell: bash
      env:
        TF_PLUGIN_CACHE_DIR: ${{ inputs.tf_plugin_cache_dir }}

    - name: Terraform Plugin Cache
      uses: actions/cache@v4.0.1
      with:
        path: ${{ inputs.tf_plugin_cache_dir }}
        key: ${{ runner.os }}-terraform-plugin-cache-${{ hashFiles('**/.terraform.lock.hcl') }}

    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: v0.50.3

    - name: Show version
      run: tflint --version
      shell: bash

    - name: Init TFLint
      run: tflint --init
      shell: bash
      env:
      #   # https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/plugins.md#avoiding-rate-limiting
        GITHUB_TOKEN: ${{ env.gh_pat }}

    - name: Run TFLint
      run: tflint -f json 
      shell: bash


    # Install the latest version of Terragrunt CLI and 
    # configure the Terragrunt CLI configuration file with a Terragrunt Cloud user API token
    - name: Setup Terraform 
      uses: hashicorp/setup-Terraform@v3
      # env:
      #   TF_VERSION: ${{ env.tf_version }}
      with:
        # terraform_version: ${{ env.tf_version }}
        terraform_wrapper: true

    - name: Setup Terraform version
      run: terraform --version
      shell: bash

    - name: Setup Terraform wrapper path
      run: which terraform
      shell: bash


    - name: Setup Terragrunt
      uses: autero1/action-terragrunt@v3
      with:
        terragrunt-version: "0.59.7"
        token: ${{ env.gh_pat }}

    - name: Checkout repo
      uses: actions/checkout@main

    # Initialize a new or existing Terragrunt working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terragrunt Init
      run: |
        terragrunt init --terragrunt-non-interactive
      shell: bash
      env:
        AWS_ACCOUNT_ID: ${{ inputs.aws_account_id }}

    # - name: Setup Terragrunt
    #   uses: autero1/action-terragrunt@v3
    #   env:
    #     TG_VER: ${{ env.tg_ver }}
    #   with:
    #     token: ${{ env.gh_pat }}
      
    - name: Terragrunt Plan ${{ inputs.environment_name }}
      run: |
        cd ${{ inputs.working_dir }}
        terragrunt run-all plan
      shell: bash
      env:
        WORKING_DIR: ${{ inputs.working_dir }}


    - name: Checkov GitHub Action
      uses: bridgecrewio/checkov-action@v12
      with:
        # This will add both a CLI output to the console and create a results.sarif file
        output_format: cli,sarif
        output_file_path: console,results.sarif
      
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3     
      # Results are generated only on a success or failure
      # this is required since GitHub by default won't run the next step
      # when the previous one has failed. Security checks that do not pass will 'fail'.
      # An alternative is to add `continue-on-error: true` to the previous step
      # Or 'soft_fail: true' to checkov.
      if: success() || failure()
      with:
        sarif_file: results.sarif


    - name: Terragrunt Apply ${{ inputs.environment_name }}
      if: ${{ inputs.apply == true }}
      run: |
        cd ${{ inputs.inputs.working_dir }}
        terragrunt run-all apply
      shell: bash
      env:
        WORKING_DIR: ${{ inputs.working_dir }}



